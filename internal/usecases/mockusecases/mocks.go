// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecases/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecases/interfaces.go -destination=./internal/usecases/mockusecases/mocks.go -package=mockusecases
//

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/MostajeranMohammad/dekamond-auth-challenge/internal/dto"
	entities "github.com/MostajeranMohammad/dekamond-auth-challenge/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// LoginRequestOtp mocks base method.
func (m *MockAuthService) LoginRequestOtp(ctx context.Context, req dto.LoginDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRequestOtp", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginRequestOtp indicates an expected call of LoginRequestOtp.
func (mr *MockAuthServiceMockRecorder) LoginRequestOtp(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRequestOtp", reflect.TypeOf((*MockAuthService)(nil).LoginRequestOtp), ctx, req)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(ctx context.Context, token string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), ctx, token)
}

// VerifyLoginOTP mocks base method.
func (m *MockAuthService) VerifyLoginOTP(ctx context.Context, body dto.VerifyLoginOTP) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyLoginOTP", ctx, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyLoginOTP indicates an expected call of VerifyLoginOTP.
func (mr *MockAuthServiceMockRecorder) VerifyLoginOTP(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyLoginOTP", reflect.TypeOf((*MockAuthService)(nil).VerifyLoginOTP), ctx, body)
}

// MockOtpUsecase is a mock of OtpUsecase interface.
type MockOtpUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockOtpUsecaseMockRecorder
	isgomock struct{}
}

// MockOtpUsecaseMockRecorder is the mock recorder for MockOtpUsecase.
type MockOtpUsecaseMockRecorder struct {
	mock *MockOtpUsecase
}

// NewMockOtpUsecase creates a new mock instance.
func NewMockOtpUsecase(ctrl *gomock.Controller) *MockOtpUsecase {
	mock := &MockOtpUsecase{ctrl: ctrl}
	mock.recorder = &MockOtpUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpUsecase) EXPECT() *MockOtpUsecaseMockRecorder {
	return m.recorder
}

// GenerateOTP mocks base method.
func (m *MockOtpUsecase) GenerateOTP() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTP")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateOTP indicates an expected call of GenerateOTP.
func (mr *MockOtpUsecaseMockRecorder) GenerateOTP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTP", reflect.TypeOf((*MockOtpUsecase)(nil).GenerateOTP))
}

// SaveOTP mocks base method.
func (m *MockOtpUsecase) SaveOTP(ctx context.Context, phone, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOTP", ctx, phone, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOTP indicates an expected call of SaveOTP.
func (mr *MockOtpUsecaseMockRecorder) SaveOTP(ctx, phone, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOTP", reflect.TypeOf((*MockOtpUsecase)(nil).SaveOTP), ctx, phone, otp)
}

// SendOtpSms mocks base method.
func (m *MockOtpUsecase) SendOtpSms(ctx context.Context, phone, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtpSms", ctx, phone, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOtpSms indicates an expected call of SendOtpSms.
func (mr *MockOtpUsecaseMockRecorder) SendOtpSms(ctx, phone, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtpSms", reflect.TypeOf((*MockOtpUsecase)(nil).SendOtpSms), ctx, phone, otp)
}

// VerifyOTP mocks base method.
func (m *MockOtpUsecase) VerifyOTP(ctx context.Context, phone, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", ctx, phone, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockOtpUsecaseMockRecorder) VerifyOTP(ctx, phone, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockOtpUsecase)(nil).VerifyOTP), ctx, phone, otp)
}

// MockJwtUsecase is a mock of JwtUsecase interface.
type MockJwtUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockJwtUsecaseMockRecorder
	isgomock struct{}
}

// MockJwtUsecaseMockRecorder is the mock recorder for MockJwtUsecase.
type MockJwtUsecaseMockRecorder struct {
	mock *MockJwtUsecase
}

// NewMockJwtUsecase creates a new mock instance.
func NewMockJwtUsecase(ctrl *gomock.Controller) *MockJwtUsecase {
	mock := &MockJwtUsecase{ctrl: ctrl}
	mock.recorder = &MockJwtUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtUsecase) EXPECT() *MockJwtUsecaseMockRecorder {
	return m.recorder
}

// GenerateRefreshToken mocks base method.
func (m *MockJwtUsecase) GenerateRefreshToken(payload entities.JwtPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockJwtUsecaseMockRecorder) GenerateRefreshToken(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockJwtUsecase)(nil).GenerateRefreshToken), payload)
}

// GenerateToken mocks base method.
func (m *MockJwtUsecase) GenerateToken(payload entities.JwtPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJwtUsecaseMockRecorder) GenerateToken(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJwtUsecase)(nil).GenerateToken), payload)
}

// ValidateToken mocks base method.
func (m *MockJwtUsecase) ValidateToken(token string) (entities.JwtPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(entities.JwtPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJwtUsecaseMockRecorder) ValidateToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJwtUsecase)(nil).ValidateToken), token)
}

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
	isgomock struct{}
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockUsersService) GetAllUsers(ctx context.Context, page, limit uint32, phoneSearchTerm *string, creationFrom, creationTo *time.Time) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx, page, limit, phoneSearchTerm, creationFrom, creationTo)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUsersServiceMockRecorder) GetAllUsers(ctx, page, limit, phoneSearchTerm, creationFrom, creationTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUsersService)(nil).GetAllUsers), ctx, page, limit, phoneSearchTerm, creationFrom, creationTo)
}

// GetUser mocks base method.
func (m *MockUsersService) GetUser(ctx context.Context, id uint32) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServiceMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersService)(nil).GetUser), ctx, id)
}
